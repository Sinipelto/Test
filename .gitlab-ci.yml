# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

workflow:
  name: CICD Pipeline to Build, Test, Release and Deploy
  auto_cancel:
    on_job_failure: all
    on_new_commit: interruptible

# using defaults for every job is preferred
# instead of using globals, if keyword supported
default:
  image:
    name: eclipse-temurin:8u422-b05-jdk
  # to consolidate with GH, specify runner OS for all Jobs
  # this can be found in the GitLab WebUI page CICD -> runners
  tags:
    - saas-linux-medium-amd64
  interruptible: true
  before_script:
    - GRADLE_USER_HOME="$(pwd)/.gradle"
    - export GRADLE_USER_HOME
  cache:
    key: $CI_PIPELINE_ID
    untracked: false
    when: on_success
    paths:
      - '**/*.gradle*'
      - '**/gradle-wrapper.properties'

stages:
  - build
  - test
  - release_pre
  - release
  - deploy

variables:
  APP_NAME: 'test-app'
  BUILD_DIR: 'client/build/libs'
  ENVIRONMENT: 'Production'

build:
  stage: build
  # only/except has to be defined
  # for each job separately :)
  only:
    refs:
      - master
      - release
  except:
    changes:
      - '**/*.md'
      - '**/*.txt'
      - 'version'
      - '.github/**'
  script:
    - ./gradlew build --no-daemon

# include:
#   - template: Security/SAST.gitlab-ci.yml

test:
  stage: test
  only:
    refs:
      - master
      - release
  except:
    changes:
      - '**/*.md'
      - '**/*.txt'
      - 'version'
      - '.github/**'
  dependencies:
    - build
  script:
    - ./gradlew test --no-daemon

release_pre:
  stage: release_pre
  only:
    refs:
      - master
      - release
  except:
    changes:
      - '**/*.md'
      - '**/*.txt'
      - 'version'
      - '.github/**'
  image:
    name: bitnami/git:latest
  dependencies:
    - build
    - test
  script:
    - chmod +x version.sh
    - VERSION_OLD=$(cat version)
    - VERSION=$(./version.sh $VERSION_OLD)
    - echo "VERSION_OLD=$VERSION_OLD" >> ${GITHUB_ENV:-build.env}
    - echo "VERSION=$VERSION" >> ${GITHUB_ENV:-build.env}
    - echo $VERSION > version
    - git config --global --add safe.directory "$(pwd)"
    - git config user.name "DevOps User"
    - git config user.email "devops@company.com"
    # this is NOT required in GH - how to handle??
#    - git remote remove origin
#    - git remote add origin "https://$GITLAB_USERNAME:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
#    - git remote add origin "$CI_REPOSITORY_URL"
    - git add version
    - git commit -m "[skip-ci] Automatic Bump Version from ${VERSION_OLD} to ${VERSION}."
#    - git push origin HEAD:$CI_COMMIT_BRANCH
    - echo git push https://gitlab-ci-token:$CI_JOB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$CI_COMMIT_BRANCH
    - git push https://gitlab-ci-token:$CI_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$CI_COMMIT_BRANCH
  artifacts:
    when: on_success
    untracked: false
    reports:
      dotenv: build.env

release:
  stage: release
  only:
    refs:
      - master
      - release
  except:
    changes:
      - '**/*.md'
      - '**/*.txt'
      - 'version'
      - '.github/**'
  dependencies:
    - build
    - test
    - release_pre
  script:
    - VERSION=$(cat version)
    - echo "VERSION=$VERSION" >> ${GITHUB_ENV:-build.env}
    - ./gradlew jar --no-daemon
    - mv -v ${BUILD_DIR}/*.jar ${APP_NAME}_${VERSION}.jar
  release:
    # Description is REQUIRED field TODO: how differs from 'name'?
    description: "DESCRIPTION: Automatic Release ${VERSION}"
    name: "NAME: Automatic Release ${VERSION}"
    tag_name: ${VERSION}
    ref: ${VERSION}
    tag_message: "TAGMSG: A new release: ${VERSION}"
  artifacts:
    when: on_success
    untracked: false
    name: ${APP_NAME}_${VERSION}
    access: all
    paths:
      - version
      - Readme.txt
      - ${APP_NAME}_${VERSION}.jar
    expire_in: "7 days"

deploy:
  stage: deploy
  only:
    refs:
      - master
      - release
  except:
    changes:
      - '**/*.md'
      - '**/*.txt'
      - 'version'
      - '.github/**'
  dependencies:
    - build
    - test
    - release # pre and post
  script:
    - VERSION=$(cat version)
    - echo "VERSION=$VERSION" >> ${GITHUB_ENV:-build.env}
    - ./gradlew publish --no-daemon
  environment:
    name: Production
    url: $CI_REPOSITORY_URL
    action: start
    deployment_tier: production

  # TODO: PUBLISH TO GITLAB PACKAGES
